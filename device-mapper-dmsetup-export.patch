---
 man/dmsetup.8.in |    7 ++++
 tools/dmsetup.c  |   88 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 95 insertions(+)

Index: LVM2.2.02.98/man/dmsetup.8.in
===================================================================
--- LVM2.2.02.98.orig/man/dmsetup.8.in
+++ LVM2.2.02.98/man/dmsetup.8.in
@@ -17,10 +17,13 @@ dmsetup \- low level logical volume mana
 .RB [{ \-\-addnodeoncreate | \-\-addnodeonresume }]
 .RB [ \-\-readahead
 .RI [ + ]< sectors >| auto | none ]
 .RE
 .br
+.B dmsetup export
+.I [ device_name ]
+.br
 .B dmsetup deps
 .RB [ \-o
 .IR options ]
 .RI [ device_name ]
 .br
@@ -283,10 +286,14 @@ Otherwise a table is read from standard
 The optional uuid can be used in place of
 device_name in subsequent dmsetup commands.
 If successful a device will appear as
 /dev/mapper/<device-name>.
 See below for information on the table format.
+.IP \fBexport
+.I [ device_name ]
+.br
+Outputs information in key/value format to be imported by other programs.
 .br
 .TP
 .B deps
 .RB [ \-o
 .IR options ]
Index: LVM2.2.02.98/tools/dmsetup.c
===================================================================
--- LVM2.2.02.98.orig/tools/dmsetup.c
+++ LVM2.2.02.98/tools/dmsetup.c
@@ -1706,10 +1706,97 @@ static int _status(CMD_ARGS)
       out:
 	dm_task_destroy(dmt);
 	return r;
 }
 
+static int _export(CMD_ARGS)
+{
+	int r = 0;
+	struct dm_task *dmt = NULL;
+	void *next = NULL;
+	uint64_t start, length;
+	char *target_type = NULL;
+	char *params;
+	const char *name = NULL;
+	const char *uuid = NULL;
+	struct dm_info info;
+
+	if (names)
+		name = names->name;
+	else if (argc == 2)
+		name = argv[1];
+
+	if (!(dmt = dm_task_create(DM_DEVICE_STATUS)))
+		goto out;
+
+	if (!_set_task_device(dmt, name, 0))
+		goto out;
+
+	if (!dm_task_run(dmt))
+		goto out;
+
+	if (!dm_task_get_info(dmt, &info) || !info.exists)
+		goto out;
+
+	if (!name)
+		name = dm_task_get_name(dmt);
+
+	uuid = dm_task_get_uuid(dmt);
+	printf("DM_NAME=%s\n", name);
+
+	if ((uuid = dm_task_get_uuid(dmt)) && *uuid)
+		printf("DM_UUID=%s\n", uuid);
+
+	if (!info.exists) {
+		printf("DM_STATE=NOTPRESENT\n");
+		goto out;
+	}
+
+	printf("DM_STATE=%s\n",
+	       info.suspended ? "SUSPENDED" :
+	       (info.read_only ? "READONLY" : "ACTIVE"));
+
+	if (!info.live_table && !info.inactive_table)
+		printf("DM_TABLE_STATE=NONE\n");
+	else
+		printf("DM_TABLE_STATE=%s%s%s\n",
+		       info.live_table ? "LIVE" : "",
+		       info.live_table && info.inactive_table ? "/" : "",
+		       info.inactive_table ? "INACTIVE" : "");
+
+	if (info.open_count != -1)
+		printf("DM_OPENCOUNT=%d\n", info.open_count);
+
+	printf("DM_LAST_EVENT_NR=%" PRIu32 "\n", info.event_nr);
+
+	printf("DM_MAJOR=%d\n", info.major);
+	printf("DM_MINOR=%d\n", info.minor);
+
+	if (info.target_count != -1)
+		printf("DM_TARGET_COUNT=%d\n", info.target_count);
+
+	/* export all table types */
+	next = dm_get_next_target(dmt, next, &start, &length,
+				  &target_type, &params);
+	if (target_type) {
+		printf("DM_TARGET_TYPES=%s", target_type);
+		while (next) {
+			next = dm_get_next_target(dmt, next, &start, &length,
+						  &target_type, &params);
+			if (target_type)
+				printf(",%s", target_type);
+		}
+		printf("\n");
+	}
+
+	r = 1;
+      out:
+	if (dmt)
+		dm_task_destroy(dmt);
+	return r;
+}
+
 /* Show target names and their version numbers */
 static int _targets(CMD_ARGS)
 {
 	int r = 0;
 	struct dm_task *dmt;
@@ -3056,10 +3143,11 @@ static struct command _commands[] = {
 	{"message", "<device> <sector> <message>", 2, -1, 0, _message},
 	{"ls", "[--target <target_type>] [--exec <command>] [-o options] [--tree]", 0, 0, 0, _ls},
 	{"info", "[<device>]", 0, -1, 1, _info},
 	{"deps", "[-o options] [<device>]", 0, -1, 1, _deps},
 	{"status", "[<device>] [--noflush] [--target <target_type>]", 0, -1, 1, _status},
+	{"export", "[<device>]", 0, 1, 1, _export},
 	{"table", "[<device>] [--target <target_type>] [--showkeys]", 0, -1, 1, _status},
 	{"wait", "<device> [<event_nr>] [--noflush]", 0, 2, 0, _wait},
 	{"mknodes", "[<device>]", 0, -1, 1, _mknodes},
 	{"mangle", "[<device>]", 0, -1, 1, _mangle},
 	{"udevcreatecookie", "", 0, 0, 0, _udevcreatecookie},
